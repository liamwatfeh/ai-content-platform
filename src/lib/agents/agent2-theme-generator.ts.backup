// Agent 2: Theme Generator
// Model: o3-2025-04-16 or Claude Sonnet 4 (with thinking enabled)
// Purpose: Generate 6 concept seeds based on iterative research and marketing brief

import { ChatOpenAI } from "@langchain/openai";
import { z } from "zod";
import { BasicWorkflowState, Theme } from "../schemas/types";
import {
  pineconeSearchTool,
  getWhitepaperConfig,
  listAvailableWhitepapers,
} from "../tools/pinecone-search";

// Schema for Agent 2's structured output - updated for 6 concept seeds
const ThemeGenerationOutputSchema = z.object({
  themes: z
    .array(
      z.object({
        id: z.string(),
        title: z.string(),
        description: z.string(),
        whyItWorks: z.array(z.string()).length(3),
        detailedDescription: z.string(),
      })
    )
    .length(6), // Changed from 3 to 6 concept seeds
  searchSummary: z
    .string()
    .describe("Summary of iterative research findings and methodology"),
});

export async function themeGeneratorAgent(
  state: BasicWorkflowState
): Promise<Partial<BasicWorkflowState>> {
  console.log("ü§ñ Agent 2: Theme Generator starting iterative research...");
  console.log(`üìä Previous themes count: ${state.previousThemes?.length || 0}`);
  console.log(`üîÑ Regeneration count: ${state.regenerationCount}`);

  try {
    // Initialize OpenAI model (o3-2025-04-16 does not support temperature)
    const llm = new ChatOpenAI({
      model: "o3-2025-04-16", // Use o3-2025-04-16 model
      apiKey: process.env.OPENAI_API_KEY,
    });

    // Get whitepaper configuration dynamically from database
    console.log("üîç Getting whitepaper configuration from database...");

    // For testing, specifically use the "Prepared Minds by Brilliant Noise" whitepaper
    // which has smaller chunks that work with reranking
    let whitepaperConfig;
    try {
      whitepaperConfig = await getWhitepaperConfig("Prepared Minds");
      console.log(
        `‚úÖ Config retrieved: Index=${whitepaperConfig.indexName}, Namespace=${whitepaperConfig.namespace}`
      );

      // Verify we got the right whitepaper
      if (!whitepaperConfig.namespace.includes("Prepared-Minds")) {
        throw new Error("Wrong whitepaper found, will use fallback");
      }
    } catch (error) {
      console.log("üîÑ Fallback: Using first available whitepaper...");
      const availableWhitepapers = await listAvailableWhitepapers();
      if (availableWhitepapers.length === 0) {
        throw new Error(
          "No whitepapers found in database. Please upload a whitepaper first."
        );
      }
      const firstWhitepaper = availableWhitepapers[0];
      whitepaperConfig = await getWhitepaperConfig(firstWhitepaper.name);
      console.log(`üìÑ Using fallback: ${firstWhitepaper.name}`);
    }

    // Parse the marketing brief from Agent 1
    let marketingBrief;
    try {
      marketingBrief =
        typeof state.marketingBrief === "string"
          ? JSON.parse(state.marketingBrief)
          : state.marketingBrief;
    } catch (error) {
      console.error("‚ùå Failed to parse marketing brief:", error);
      throw new Error("Invalid marketing brief format");
    }

    // Step 1: Agent-driven iterative research
    console.log("üîç Starting agent-driven iterative research...");

    const systemPrompt = `**SITUATION**: You are the critical intelligence-gathering and initial ideation stage in the Content Studio pipeline. You've received structured strategic analysis from the Brief Analysis Agent, and you're responsible for both uncovering unique insights AND suggesting initial concept seeds that showcase the company's competitive advantages.

**PROBLEM**: You need to systematically explore the company's proprietary documents through iterative searching - starting broad, then drilling down into the most promising findings with increasingly specific queries. A few surface-level searches won't uncover the deep insights needed. You must follow interesting threads and dig deeper when you find compelling information, building a comprehensive understanding before suggesting concept seeds.

**ASPIRATION**: Become the "treasure hunter and initial creative" who conducts thorough, iterative research to uncover the company's most valuable proprietary insights. Start with broad strategic queries, analyze what's promising, then drill deeper with targeted follow-up queries. Build comprehensive understanding through 8-12 strategic searches before synthesizing findings into concept seeds.

**RESULTS**: Execute systematic iterative research following this approach:

**SEARCH STRATEGY**:
1. **Initial Broad Phase (3-4 queries)**: Start with high-level strategic themes from brief analysis
2. **Analysis Phase**: Evaluate which broad searches yielded the most promising insights  
3. **Deep Dive Phase (4-6 queries)**: Create targeted queries to drill deeper into promising areas
4. **Follow-up Phase (2-4 queries)**: Pursue specific details, statistics, or methodologies found in deep dives
5. **Synthesis Phase**: Transform comprehensive findings into 6 concept seeds (MUST BE 6)

**EACH SEARCH ITERATION MUST**:
- Build on previous findings rather than repeat similar searches
- Follow the most promising threads from previous results
- Get progressively more specific and targeted
- Stop only when you've exhausted promising angles or hit search limits

**KISMET**: The magic happens when your 8th search uncovers the detail that transforms a good insight into an amazing concept seed - this is why iterative searching matters.

**WORKFLOW CONTEXT**: You're the "First Ideas" agent conducting thorough investigative research. The Brief Analysis Agent has provided strategic direction, and your concept seeds will feed into the Concept Synthesis Agent, who will refine and expand your ideas. Don't rush - comprehensive research now saves work later and produces better concepts.

**STAGE OBJECTIVE**: Conduct thorough iterative research (8-12 searches minimum) to uncover deep proprietary insights and transform them into compelling concept seeds.

**SEARCH EXECUTION REQUIREMENTS**:
- **Minimum 8 searches, target 10-12 searches**
- **Each search must build on previous findings**  
- **Progress from broad ‚Üí specific ‚Üí detailed**
- **Follow promising threads until exhausted**
- **Document your reasoning for each query**

**CONCEPT SEED REQUIREMENTS**:
- Generate exactly 3 concept seeds
- Each concept must be distinct and non-overlapping
- Avoid any themes similar to these previous ones: ${JSON.stringify(state.previousThemes?.map((t) => t.title) || [])}
- Base all concepts on discoveries from your iterative research
- Focus on proprietary insights that showcase competitive advantages

**OUTPUT FORMAT**: You must determine your own search queries and execute them iteratively. For each search, provide:
1. Your reasoning for the query
2. The search query itself
3. Analysis of what you found
4. How it influences your next search

After completing 8-12 searches, synthesize your findings into 3 concept seeds with this exact JSON structure:
{
  "searchPlan": "Your overall research strategy and reasoning",
  "searchQueries": ["query1", "query2", "etc"],
  "searchAnalysis": "What you discovered and how searches built on each other",
  "themes": [
    {
      "id": "concept-1",
      "title": "Concept Title",
      "description": "Brief description...",
      "whyItWorks": ["Reason 1", "Reason 2", "Reason 3"],
      "detailedDescription": "Detailed description with specific research insights..."
    }
  ],
  "searchSummary": "Summary of iterative research findings and methodology"
}`;

    const userPrompt = `Execute iterative research and concept generation based on:

**MARKETING BRIEF CONTEXT**:
- Business Context: ${state.businessContext}
- Target Audience: ${state.targetAudience}
- Marketing Goals: ${state.marketingGoals}
- Executive Summary: ${marketingBrief.executiveSummary || "Not provided"}
- Campaign Objectives: ${JSON.stringify(marketingBrief.campaignObjectives || [])}
- Key Messages: ${JSON.stringify(marketingBrief.keyMessages || [])}
- Target Persona: ${JSON.stringify(marketingBrief.targetPersona || {})}

**PREVIOUS THEMES TO AVOID**:
${state.previousThemes?.map((theme) => `- ${theme.title}: ${theme.description}`).join("\n") || "None"}

**YOUR TASK**:
1. **Plan your research strategy** - decide on your initial broad queries
2. **Execute searches iteratively** - start broad, then drill deeper based on findings
3. **Build each query on previous results** - follow the most promising threads
4. **Continue until you have 8-12 searches** - don't stop at surface level
5. **Synthesize findings into 3 concept seeds** - transform insights into actionable concepts

Begin your iterative research now. Think through your strategy, then provide your planned queries and execute them one by one, building comprehensive understanding before generating concepts.`;

    console.log("ü§ñ Calling LLM for iterative research planning...");

    // Call LLM to get the research plan and initial queries
    const planResponse = await llm.invoke([
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt },
    ]);

    console.log("üìù Research plan received, parsing...");

    // Parse the research plan
    let researchPlan;
    try {
      const content = planResponse.content as string;
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      researchPlan = JSON.parse(jsonString);
    } catch (parseError) {
      console.error("‚ùå Failed to parse research plan:", parseError);
      console.error("Raw response:", planResponse.content);
      throw new Error("Failed to parse research plan");
    }

    // Execute the planned searches iteratively
    const searchQueries = researchPlan.searchQueries || [];
    let allSearchResults: any[] = [];
    let searchExecutionLog: Array<{
      query: string;
      resultCount: number;
      analysis: string;
    }> = [];

    console.log(`üéØ Executing ${searchQueries.length} planned searches...`);

    for (let i = 0; i < searchQueries.length && i < 12; i++) {
      const query = searchQueries[i];
      try {
        console.log(`üîç Search ${i + 1}/${searchQueries.length}: "${query}"`);

        const searchResult = await pineconeSearchTool.invoke({
          query,
          whitepaperNamespace: whitepaperConfig.namespace,
          indexName: whitepaperConfig.indexName,
          topK: 10,
          topN: 5,
        });

        const parsedResults = JSON.parse(searchResult);
        allSearchResults.push(...parsedResults.results);

        searchExecutionLog.push({
          query,
          resultCount: parsedResults.results.length,
          analysis: `Found ${parsedResults.results.length} relevant results`,
        });

        // Brief pause between searches to avoid rate limiting
        await new Promise((resolve) => setTimeout(resolve, 500));
      } catch (error) {
        console.error(`‚ùå Search failed for "${query}":`, error);
        searchExecutionLog.push({
          query,
          resultCount: 0,
          analysis: `Search failed: ${error}`,
        });
      }
    }

    console.log(
      `‚úÖ Research complete: ${allSearchResults.length} total results from ${searchExecutionLog.length} searches`
    );

    if (allSearchResults.length === 0) {
      throw new Error(
        "No search results found. Please check your Pinecone configuration and whitepaper content."
      );
    }

    // Deduplicate results by ID and take top results by score
    const uniqueResults = Array.from(
      new Map(allSearchResults.map((result) => [result.id, result])).values()
    )
      .sort((a, b) => (b.score || 0) - (a.score || 0))
      .slice(0, 30); // Top 30 unique results for comprehensive analysis

    // Step 2: Generate 6 concept seeds based on comprehensive research
    const conceptSynthesisPrompt = `Based on your completed iterative research, now synthesize your findings into exactly 6 concept seeds.

**RESEARCH RESULTS** (Top ${uniqueResults.length} findings):
${uniqueResults
  .map(
    (result, i) => `
Result ${i + 1} (Score: ${result.score?.toFixed(4) || "N/A"}):
${result.text}
Category: ${result.category || "General"}
`
  )
  .join("\n")}

**SEARCH EXECUTION LOG**:
${searchExecutionLog
  .map(
    (log, i) => `
Search ${i + 1}: "${log.query}"
Results: ${log.resultCount} findings
Analysis: ${log.analysis}
`
  )
  .join("\n")}

**SYNTHESIS REQUIREMENTS**:
- Generate exactly 6 concept seeds (not 3)
- Each must leverage different aspects of your research findings
- Build on the iterative insights you've uncovered
- Avoid any similarity to previous themes: ${JSON.stringify(state.previousThemes?.map((t) => t.title) || [])}
- Focus on proprietary competitive advantages discovered

Return ONLY valid JSON with this exact structure:
{
  "themes": [
    {
      "id": "concept-1",
      "title": "Concept Title",
      "description": "Brief description...",
      "whyItWorks": ["Reason 1", "Reason 2", "Reason 3"],
      "detailedDescription": "Detailed description with specific research insights..."
    }
  ],
  "searchSummary": "Summary of your iterative research methodology and key discoveries"
}`;

    console.log("ü§ñ Synthesizing research into 6 concept seeds...");

    // Call LLM to synthesize findings into concept seeds
    const conceptResponse = await llm.invoke([
      {
        role: "system",
        content:
          "You are synthesizing comprehensive research findings into 6 distinct concept seeds. Base each concept on specific discoveries from the iterative research.",
      },
      { role: "user", content: conceptSynthesisPrompt },
    ]);

    console.log("üìù Concept synthesis received, parsing...");

    // Parse and validate the final response
    let conceptData;
    try {
      const content = conceptResponse.content as string;
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      conceptData = JSON.parse(jsonString);
    } catch (parseError) {
      console.error("‚ùå Failed to parse concept response:", parseError);
      console.error("Raw response:", conceptResponse.content);
      throw new Error("Failed to parse concept generation response");
    }

    const validatedOutput = ThemeGenerationOutputSchema.parse(conceptData);

    console.log("‚úÖ Agent 2: Generated 6 concept seeds successfully");
    console.log(
      `üìã Concepts: ${validatedOutput.themes.map((t) => t.title).join(", ")}`
    );

    return {
      generatedThemes: validatedOutput.themes,
      searchHistory: [...(state.searchHistory || []), ...searchQueries],
      regenerationCount: (state.regenerationCount || 0) + 1,
      currentStep: "themes_generated",
      needsHumanInput: true, // Pause for user to select theme
    };
  } catch (error) {
    console.error("‚ùå Agent 2 Error:", error);
    throw new Error(
      `Theme generation failed: ${error instanceof Error ? error.message : "Unknown error"}`
    );
  }
}

// Helper function no longer needed with agent-driven search
// but keeping for backwards compatibility if other parts of system use it
function generateNewSearchQueries(
  previousSearches: string[],
  regenerationCount: number
): string[] {
  // This is now handled by the agent itself
  return [];
}

export type ThemeGenerationOutput = z.infer<typeof ThemeGenerationOutputSchema>;
