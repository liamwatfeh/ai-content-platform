// Types and Schemas for LangGraph Agent System - Updated for Frontend
import { z } from "zod";
import { Annotation } from "@langchain/langgraph";

// Add theme schema
const ThemeSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string(),
  whyItWorks: z.array(z.string()).length(3),
  detailedDescription: z.string().describe("Hidden field for next agent"),
});

// Research Dossier Schema for Agent 3 output
export const ResearchDossierSchema = z.object({
  selectedTheme: ThemeSchema,
  
  // Core whitepaper evidence - the foundation of all content
  whitepaperEvidence: z.object({
    keyFindings: z.array(
      z.object({
        claim: z.string().describe("The key claim or finding"),
        evidence: z.string().describe("Supporting evidence from whitepaper"),
        sourceContext: z.string().describe("Context from the whitepaper section"),
        evidenceType: z.enum(["quantitative", "qualitative", "case_study", "methodology"]),
        confidence: z.enum(["high", "medium", "low"]).describe("Confidence in the evidence"),
        contentRelevance: z.string().describe("How this supports content creation"),
      })
    ).min(8).max(15).describe("Key evidence-backed findings from the whitepaper"),
    
    quantitativeData: z.array(
      z.object({
        metric: z.string().describe("The specific metric or measurement"),
        value: z.string().describe("The numerical value or statistic"),
        context: z.string().describe("Context and significance of this data"),
        sourceLocation: z.string().describe("Where in whitepaper this was found"),
        usageNotes: z.string().describe("How this data can be used in content"),
      })
    ).describe("Quantitative data points from whitepaper"),
    
    qualitativeInsights: z.array(
      z.object({
        insight: z.string().describe("The qualitative insight or observation"),
        supportingQuote: z.string().describe("Relevant quote or paraphrase from whitepaper"),
        expertiseLevel: z.enum(["research_based", "industry_analysis", "expert_opinion"]),
        contentApplication: z.string().describe("How to apply this in content"),
      })
    ).describe("Qualitative insights and expert observations"),
    
    caseStudies: z.array(
      z.object({
        title: z.string().describe("Case study or example title"),
        summary: z.string().describe("Summary of the case study"),
        keyOutcomes: z.array(z.string()).describe("Key results or outcomes"),
        applicability: z.string().describe("How this applies to target audience"),
      })
    ).describe("Case studies and real-world examples from whitepaper"),
  }),
  
  // Research process and methodology
  deepResearchFindings: z.array(
    z.object({
      category: z.string(),
      whitepaperInsights: z.array(z.string()).describe("Insights specifically from whitepaper"),
      supportingEvidence: z.array(z.string()).describe("Direct evidence from whitepaper content"),
      researchGaps: z.array(z.string()).describe("Areas needing deeper investigation"),
    })
  ),
  
  // Enhanced content concepts with strong whitepaper backing
  contentConcepts: z.array(
    z.object({
      id: z.string(),
      title: z.string(),
      angle: z.string().describe("The unique perspective or angle"),
      strategicPositioning: z.string().describe("How this positions the company"),
      
      // Enhanced whitepaper integration
      whitepaperFoundation: z.object({
        primaryEvidence: z.array(z.string()).describe("Key whitepaper evidence supporting this concept"),
        supportingData: z.array(z.string()).describe("Quantitative data from whitepaper"),
        expertCitations: z.array(z.string()).describe("Expert insights or quotes to reference"),
        caseStudyReferences: z.array(z.string()).describe("Relevant case studies from whitepaper"),
      }),
      
      keyInsights: z.array(z.string()).length(3),
      targetPersonaRelevance: z.string().describe("Why this resonates with target audience"),
      competitiveAdvantage: z.string().describe("What makes this concept unique based on whitepaper"),
      
      contentStructure: z.object({
        hook: z.string(),
        mainNarrative: z.string().describe("Core story backed by whitepaper findings"),
        supportingPoints: z.array(z.string()).describe("Arguments supported by whitepaper evidence"),
        callToAction: z.string(),
        evidenceIntegration: z.string().describe("How to weave whitepaper evidence throughout content"),
      }),
      
      // Ready-to-use content elements for future agents
      contentAssets: z.object({
        readyToCiteClaims: z.array(z.string()).describe("Claims ready for direct use in content"),
        statisticsToHighlight: z.array(z.string()).describe("Key stats from whitepaper to feature"),
        quotableInsights: z.array(z.string()).describe("Insights formatted for quotes/callouts"),
        deepDiveOpportunities: z.array(z.string()).describe("Areas for Agents 4&5 to explore further"),
      }),
    })
  ).length(6),
  
  // Enhanced research summary with whitepaper focus
  researchSummary: z.string().describe("Summary of deep research methodology and whitepaper findings"),
  whitepaperUtilization: z.object({
    sectionsAnalyzed: z.array(z.string()).describe("Whitepaper sections that were deeply analyzed"),
    evidenceConfidence: z.enum(["high", "medium", "low"]).describe("Overall confidence in whitepaper evidence"),
    contentReadiness: z.string().describe("Assessment of how ready the whitepaper evidence is for content creation"),
    recommendedFocus: z.array(z.string()).describe("Recommended focus areas for content based on strongest whitepaper evidence"),
  }),
});

// Updated workflow state with Agent 3 fields
export const BasicWorkflowState = z.object({
  // User inputs from the form
  businessContext: z.string().describe("Your business context field"),
  targetAudience: z.string().describe("Who is your target audience field"),
  marketingGoals: z.string().describe("What are your marketing goals field"),

  // Content output preferences
  articlesCount: z.number().default(1),
  linkedinPostsCount: z.number().default(4),
  socialPostsCount: z.number().default(8),

  // Call-to-action configuration
  ctaType: z.enum(["download_whitepaper", "contact_us"]),
  ctaUrl: z.string().optional().describe("URL for whitepaper download"),

  // Selected whitepaper for processing
  selectedWhitepaperId: z
    .string()
    .optional()
    .describe("ID of the selected whitepaper"),

  // Agent 1 output - the generated marketing brief
  marketingBrief: z.string().optional(),

  // Agent 2 outputs and memory
  generatedThemes: z.array(ThemeSchema).optional(),
  previousThemes: z
    .array(ThemeSchema)
    .default([])
    .describe("Memory of previous themes to avoid repeating"),
  searchHistory: z
    .array(z.string())
    .default([])
    .describe("Track search queries used"),
  regenerationCount: z.number().default(0),

  // Human selection
  selectedTheme: ThemeSchema.optional(),

  // Agent 3 output
  researchDossier: ResearchDossierSchema.optional(),

  // Simple workflow control
  currentStep: z.string().default("brief_creation"),
  isComplete: z.boolean().default(false),
  needsHumanInput: z.boolean().default(false),
});

export type BasicWorkflowState = z.infer<typeof BasicWorkflowState>;

// Updated LangGraph annotation with Agent 3 fields
export const BasicStateAnnotation = Annotation.Root({
  businessContext: Annotation<string>,
  targetAudience: Annotation<string>,
  marketingGoals: Annotation<string>,
  articlesCount: Annotation<number>,
  linkedinPostsCount: Annotation<number>,
  socialPostsCount: Annotation<number>,
  ctaType: Annotation<"download_whitepaper" | "contact_us">,
  ctaUrl: Annotation<string>,
  selectedWhitepaperId: Annotation<string>,
  marketingBrief: Annotation<string>,
  generatedThemes: Annotation<Theme[]>,
  previousThemes: Annotation<Theme[]>({
    reducer: (existing: Theme[], update: Theme[]) => [...existing, ...update],
    default: () => [],
  }),
  searchHistory: Annotation<string[]>({
    reducer: (existing: string[], update: string[]) => [...existing, ...update],
    default: () => [],
  }),
  regenerationCount: Annotation<number>,
  selectedTheme: Annotation<Theme>,
  researchDossier: Annotation<ResearchDossier>,
  currentStep: Annotation<string>,
  isComplete: Annotation<boolean>,
  needsHumanInput: Annotation<boolean>,
});

// Agent output schemas for structured parsing
export const MarketingBriefSchema = z.object({
  business_overview: z.string(),
  target_audience_analysis: z.string(),
  marketing_objectives: z.string(),
  key_messages: z.array(z.string()),
  tone_and_voice: z.string(),
  competitive_positioning: z.string(),
  success_metrics: z.array(z.string()),
});

export const ThemesOutputSchema = z.object({
  themes: z.array(ThemeSchema).length(3),
  recommendation: z.string(),
});

export const ArticleOutputSchema = z.object({
  headline: z.string(),
  subheadline: z.string(),
  body: z.string(),
  word_count: z.number(),
  key_takeaways: z.array(z.string()),
  seo_keywords: z.array(z.string()),
  call_to_action: z.string(),
});

export const LinkedInPostSchema = z.object({
  hook: z.string(),
  body: z.string(),
  call_to_action: z.string(),
  hashtags: z.array(z.string()),
  character_count: z.number(),
});

export const LinkedInOutputSchema = z.object({
  posts: z.array(LinkedInPostSchema),
  campaign_narrative: z.string(),
});

export const SocialPostSchema = z.object({
  platform: z.enum(["twitter", "facebook", "instagram"]),
  content: z.string(),
  hashtags: z.array(z.string()),
  character_count: z.number(),
  visual_suggestion: z.string(),
});

export const SocialOutputSchema = z.object({
  posts: z.array(SocialPostSchema),
  posting_strategy: z.string(),
});

// Final output schema
export const FinalContentOutputSchema = z.object({
  marketing_brief: MarketingBriefSchema,
  selected_theme: ThemeSchema.optional(),
  generated_themes: z.array(ThemeSchema).optional(),
  workflow_state: z
    .object({
      currentStep: z.string(),
      needsHumanInput: z.boolean(),
      isComplete: z.boolean(),
    })
    .optional(),
  research_dossier: ResearchDossierSchema.optional(),
  article: ArticleOutputSchema.optional(),
  linkedin_posts: LinkedInOutputSchema.optional(),
  social_posts: SocialOutputSchema.optional(),
  generation_metadata: z.object({
    created_at: z.string(),
    processing_time_ms: z.number(),
    agents_used: z.array(z.string()),
    whitepaper_chunks_analyzed: z.number(),
  }),
});

// Type exports for the new system
export type MarketingBrief = z.infer<typeof MarketingBriefSchema>;
export type Theme = z.infer<typeof ThemeSchema>;
export type ThemesOutput = z.infer<typeof ThemesOutputSchema>;
export type ResearchDossier = z.infer<typeof ResearchDossierSchema>;
export type ArticleOutput = z.infer<typeof ArticleOutputSchema>;
export type LinkedInOutput = z.infer<typeof LinkedInOutputSchema>;
export type SocialOutput = z.infer<typeof SocialOutputSchema>;
export type FinalContentOutput = z.infer<typeof FinalContentOutputSchema>;

// Legacy exports for backward compatibility (can be removed later)
export const UserInputSchema = BasicWorkflowState;
export type UserInput = BasicWorkflowState;
